pipeline CarsPipeline {
    // Assumption: blocks "GasReserveHttpExtractor", "GasReserveCSVInterpreter", "GasReserveTableInterpreter", and "GasReserveLoader" are defined

    AirportsHttpExtractor
        -> AirportFileInterpreter
        -> AirportCSVInterpreter
        -> AirportTableInterpreter
        -> AirportLoader;

        
    block AirportsHttpExtractor oftype HttpExtractor {
        url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
    }

    //Input: Text
    block AirportFileInterpreter oftype TextFileInterpreter { }
    //Output: TextFile


    block AirportCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
        enclosing: '';
    }
    //Output: Sheet


    block AirportTableInterpreter oftype TableInterpreter {
        header: false;
        columns: [
        "Lfd. Nummer" oftype integer,
        "Name des Flughafens" oftype text,
        "Ort" oftype text,
        "Land" oftype text,
        "IATA" oftype text,
        "ICAO" oftype text,
        "Latitude" oftype decimal,
        "Longitude" oftype decimal,
        "Altitude" oftype integer,
        "DST" oftype text,
        "Zeitzone" oftype text,
        "Zeitzonen-Datenbank" oftype text,
        "geo_punkt" oftype text,
        ];
    }

    // 15. As a last step, we load the table into a sink,
    // here into a sqlite file.
    // The structural information of the table is used
    // to generate the correct table.
    block AirportLoader oftype SQLiteLoader {
        table: "airports";
        file: "./airports.sqlite";
    }

    
    
}